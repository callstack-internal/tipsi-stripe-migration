{"version":3,"sources":["../server/index.js"],"names":["env","config","path","stripePublishableKey","process","STRIPE_PUBLISHABLE_KEY","stripeSecretKey","STRIPE_SECRET_KEY","app","use","req","res","next","originalUrl","bodyParser","json","get","send","publishableKey","post","body","email","currency","stripe","Stripe","apiVersion","typescript","customers","create","customer","params","amount","id","payment_method_options","card","request_three_d_secure","paymentIntents","paymentIntent","clientSecret","client_secret","error","raw","message","payment_method_types","setupIntents","setupIntent","listen","console","log"],"mappings":"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","sourcesContent":["import env from 'dotenv';\n\n// Replace if using a different env file or config.\nenv.config({path: './.env'});\n\nimport bodyParser from 'body-parser';\nimport express from 'express';\nimport Stripe from 'stripe';\n\nconst stripePublishableKey = process.env.STRIPE_PUBLISHABLE_KEY || '';\nconst stripeSecretKey = process.env.STRIPE_SECRET_KEY || '';\nconst app = express();\n\napp.use((req, res, next) => {\n  if (req.originalUrl === '/webhook') {\n    next();\n  } else {\n    /* @ts-ignore */\n    bodyParser.json()(req, res, next);\n  }\n});\n\napp.get('/stripe-key', (req, res) => {\n  return res.send({publishableKey: stripePublishableKey});\n});\n\napp.post('/create-payment-intent', async (req, res) => {\n  const {email, currency} = req.body;\n  const stripe = new Stripe(stripeSecretKey, {\n    apiVersion: '2020-08-27',\n    typescript: true,\n  });\n\n  const customer = await stripe.customers.create({email});\n  // Create a PaymentIntent with the order amount and currency.\n  const params = {\n    amount: 1400,\n    currency,\n    customer: customer.id,\n    payment_method_options: {\n      card: {\n        request_three_d_secure: 'automatic',\n      },\n    },\n  };\n  try {\n    const paymentIntent = await stripe.paymentIntents.create(params);\n    // Send publishable key and PaymentIntent client_secret to client.\n    return res.send({\n      clientSecret: paymentIntent.client_secret,\n    });\n  } catch (error) {\n    return res.send({\n      error: error.raw.message,\n    });\n  }\n});\n\napp.post('/create-setup-intent', async (req, res) => {\n  const {email, payment_method_types = []} = req.body;\n  const stripe = new Stripe(stripeSecretKey, {\n    apiVersion: '2020-08-27',\n    typescript: true,\n  });\n\n  const customer = await stripe.customers.create({email});\n  const setupIntent = await stripe.setupIntents.create({\n    customer: customer.id,\n    payment_method_types,\n  });\n\n  // Send publishable key and SetupIntent details to client\n  return res.send({\n    publishableKey: process.env.STRIPE_PUBLISHABLE_KEY,\n    clientSecret: setupIntent.client_secret,\n  });\n});\n\napp.listen(4242, () => console.log(`Node server listening on port ${4242}!`));\n"],"file":"index.js"}